--- a/net/minecraft/world/level/chunk/storage/ChunkRegionLoader.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkRegionLoader.java
@@ -104,7 +104,7 @@
         ChunkProviderServer chunkproviderserver = worldserver.getChunkSource();
         LevelLightEngine levellightengine = chunkproviderserver.getLightEngine();
         IRegistry<BiomeBase> iregistry = worldserver.registryAccess().registryOrThrow(Registries.BIOME);
-        Codec<PalettedContainerRO<Holder<BiomeBase>>> codec = makeBiomeCodec(iregistry);
+        Codec<DataPaletteBlock<Holder<BiomeBase>>> codec = makeBiomeCodecRW(iregistry); // CraftBukkit - read/write
         boolean flag2 = false;
 
         for (int j = 0; j < nbttaglist.size(); ++j) {
@@ -123,17 +123,17 @@
                     datapaletteblock = new DataPaletteBlock<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), DataPaletteBlock.d.SECTION_STATES);
                 }
 
-                Object object;
+                DataPaletteBlock object; // CraftBukkit - read/write
 
                 if (nbttagcompound1.contains("biomes", 10)) {
-                    object = (PalettedContainerRO) codec.parse(DynamicOpsNBT.INSTANCE, nbttagcompound1.getCompound("biomes")).promotePartial((s) -> {
+                    object = codec.parse(DynamicOpsNBT.INSTANCE, nbttagcompound1.getCompound("biomes")).promotePartial((s) -> { // CraftBukkit - decompile error
                         logErrors(chunkcoordintpair, b0, s);
                     }).getOrThrow(ChunkRegionLoader.a::new);
                 } else {
                     object = new DataPaletteBlock<>(iregistry.asHolderIdMap(), iregistry.getHolderOrThrow(Biomes.PLAINS), DataPaletteBlock.d.SECTION_BIOMES);
                 }
 
-                ChunkSection chunksection = new ChunkSection(datapaletteblock, (PalettedContainerRO) object);
+                ChunkSection chunksection = new ChunkSection(datapaletteblock, (DataPaletteBlock) object); // CraftBukkit - read/write
 
                 achunksection[k] = chunksection;
                 SectionPosition sectionposition = SectionPosition.of(chunkcoordintpair, b0);
@@ -170,7 +170,7 @@
             dataresult = BlendingData.CODEC.parse(new Dynamic(DynamicOpsNBT.INSTANCE, nbttagcompound.getCompound("blending_data")));
             logger = ChunkRegionLoader.LOGGER;
             Objects.requireNonNull(logger);
-            blendingdata = (BlendingData) dataresult.resultOrPartial(logger::error).orElse((Object) null);
+            blendingdata = (BlendingData) ((DataResult<BlendingData>) dataresult).resultOrPartial(logger::error).orElse(null); // CraftBukkit - decompile error
         } else {
             blendingdata = null;
         }
@@ -201,7 +201,7 @@
                 dataresult = BelowZeroRetrogen.CODEC.parse(new Dynamic(DynamicOpsNBT.INSTANCE, nbttagcompound.getCompound("below_zero_retrogen")));
                 logger = ChunkRegionLoader.LOGGER;
                 Objects.requireNonNull(logger);
-                Optional optional = dataresult.resultOrPartial(logger::error);
+                Optional<BelowZeroRetrogen> optional = ((DataResult<BelowZeroRetrogen>) dataresult).resultOrPartial(logger::error); // CraftBukkit - decompile error
 
                 Objects.requireNonNull(protochunk);
                 optional.ifPresent(protochunk::setBelowZeroRetrogen);
@@ -215,6 +215,13 @@
             }
         }
 
+        // CraftBukkit start - load chunk persistent data from nbt - SPIGOT-6814: Already load PDC here to account for 1.17 to 1.18 chunk upgrading.
+        net.minecraft.nbt.NBTBase persistentBase = nbttagcompound.get("ChunkBukkitValues");
+        if (persistentBase instanceof NBTTagCompound) {
+            ((IChunkAccess) object1).persistentDataContainer.putAll((NBTTagCompound) persistentBase);
+        }
+        // CraftBukkit end
+
         ((IChunkAccess) object1).setLightCorrect(flag);
         NBTTagCompound nbttagcompound2 = nbttagcompound.getCompound("Heightmaps");
         EnumSet<HeightMap.Type> enumset = EnumSet.noneOf(HeightMap.Type.class);
@@ -294,6 +301,12 @@
         return DataPaletteBlock.codecRO(iregistry.asHolderIdMap(), iregistry.holderByNameCodec(), DataPaletteBlock.d.SECTION_BIOMES, iregistry.getHolderOrThrow(Biomes.PLAINS));
     }
 
+    // CraftBukkit start - read/write
+    private static Codec<DataPaletteBlock<Holder<BiomeBase>>> makeBiomeCodecRW(IRegistry<BiomeBase> iregistry) {
+        return DataPaletteBlock.codecRW(iregistry.asHolderIdMap(), iregistry.holderByNameCodec(), DataPaletteBlock.d.SECTION_BIOMES, iregistry.getHolderOrThrow(Biomes.PLAINS));
+    }
+    // CraftBukkit end
+
     public static NBTTagCompound write(WorldServer worldserver, IChunkAccess ichunkaccess) {
         ChunkCoordIntPair chunkcoordintpair = ichunkaccess.getPos();
         NBTTagCompound nbttagcompound = GameProfileSerializer.addCurrentDataVersion(new NBTTagCompound());
@@ -305,7 +318,7 @@
         nbttagcompound.putLong("InhabitedTime", ichunkaccess.getInhabitedTime());
         nbttagcompound.putString("Status", BuiltInRegistries.CHUNK_STATUS.getKey(ichunkaccess.getStatus()).toString());
         BlendingData blendingdata = ichunkaccess.getBlendingData();
-        DataResult dataresult;
+        DataResult<NBTBase> dataresult; // CraftBukkit - decompile error
         Logger logger;
 
         if (blendingdata != null) {
@@ -429,6 +442,11 @@
 
         nbttagcompound.put("Heightmaps", nbttagcompound3);
         nbttagcompound.put("structures", packStructureData(StructurePieceSerializationContext.fromLevel(worldserver), chunkcoordintpair, ichunkaccess.getAllStarts(), ichunkaccess.getAllReferences()));
+        // CraftBukkit start - store chunk persistent data in nbt
+        if (!ichunkaccess.persistentDataContainer.isEmpty()) { // SPIGOT-6814: Always save PDC to account for 1.17 to 1.18 chunk upgrading.
+            nbttagcompound.put("ChunkBukkitValues", ichunkaccess.persistentDataContainer.toTagCompound());
+        }
+        // CraftBukkit end
         return nbttagcompound;
     }
 
@@ -533,6 +551,12 @@
                 StructureStart structurestart = StructureStart.loadStaticStart(structurepieceserializationcontext, nbttagcompound1.getCompound(s), i);
 
                 if (structurestart != null) {
+                    // CraftBukkit start - load persistent data for structure start
+                    net.minecraft.nbt.NBTBase persistentBase = nbttagcompound1.getCompound(s).get("StructureBukkitValues");
+                    if (persistentBase instanceof NBTTagCompound) {
+                        structurestart.persistentDataContainer.putAll((NBTTagCompound) persistentBase);
+                    }
+                    // CraftBukkit end
                     map.put(structure, structurestart);
                 }
             }
