--- a/net/minecraft/server/dedicated/PropertyManager.java
+++ b/net/minecraft/server/dedicated/PropertyManager.java
@@ -23,17 +23,37 @@
 import net.minecraft.core.IRegistryCustom;
 import org.slf4j.Logger;
 
+import joptsimple.OptionSet; // CraftBukkit
+
 public abstract class PropertyManager<T extends PropertyManager<T>> {
 
     private static final Logger LOGGER = LogUtils.getLogger();
     public final Properties properties;
+    // CraftBukkit start
+    private OptionSet options = null;
 
-    public PropertyManager(Properties properties) {
+    public PropertyManager(Properties properties, final OptionSet options) {
         this.properties = properties;
+
+        this.options = options;
+    }
+
+    private String getOverride(String name, String value) {
+        if ((this.options != null) && (this.options.has(name))) {
+            return String.valueOf(this.options.valueOf(name));
+        }
+
+        return value;
+        // CraftBukkit end
     }
 
     public static Properties loadFromFile(Path path) {
         try {
+            // CraftBukkit start - SPIGOT-7465, MC-264979: Don't load if file doesn't exist
+            if (!path.toFile().exists()) {
+                return new Properties();
+            }
+            // CraftBukkit end
             Properties properties;
             Properties properties1;
 
@@ -97,6 +117,11 @@
 
     public void store(Path path) {
         try {
+            // CraftBukkit start - Don't attempt writing to file if it's read only
+            if (path.toFile().exists() && !path.toFile().canWrite()) {
+                return;
+            }
+            // CraftBukkit end
             BufferedWriter bufferedwriter = Files.newBufferedWriter(path, StandardCharsets.UTF_8);
 
             try {
@@ -144,7 +169,7 @@
 
     @Nullable
     private String getStringRaw(String s) {
-        return (String) this.properties.get(s);
+        return (String) getOverride(s, this.properties.getProperty(s)); // CraftBukkit
     }
 
     @Nullable
@@ -160,6 +185,16 @@
     }
 
     protected <V> V get(String s, Function<String, V> function, Function<V, String> function1, V v0) {
+        // CraftBukkit start
+        try {
+            return get0(s, function, function1, v0);
+        } catch (Exception ex) {
+            throw new RuntimeException("Could not load invalidly configured property '" + s + "'", ex);
+        }
+    }
+
+    private <V> V get0(String s, Function<String, V> function, Function<V, String> function1, V v0) {
+        // CraftBukkit end
         String s1 = this.getStringRaw(s);
         V v1 = MoreObjects.firstNonNull(s1 != null ? function.apply(s1) : null, v0);
 
@@ -236,7 +271,7 @@
         return properties;
     }
 
-    protected abstract T reload(IRegistryCustom iregistrycustom, Properties properties);
+    protected abstract T reload(IRegistryCustom iregistrycustom, Properties properties, OptionSet optionset); // CraftBukkit
 
     public class EditableProperty<V> implements Supplier<V> {
 
@@ -258,7 +293,7 @@
             Properties properties = PropertyManager.this.cloneProperties();
 
             properties.put(this.key, this.serializer.apply(v0));
-            return PropertyManager.this.reload(iregistrycustom, properties);
+            return PropertyManager.this.reload(iregistrycustom, properties, PropertyManager.this.options); // CraftBukkit
         }
     }
 }
